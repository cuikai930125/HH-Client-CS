//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace HHMES.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WCS_NormalEntities : DbContext
    {
        public WCS_NormalEntities()
            : base("name=WCS_NormalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sys_BusinessTables> sys_BusinessTables { get; set; }
        public virtual DbSet<sys_DataSN> sys_DataSN { get; set; }
        public virtual DbSet<sys_DocSN> sys_DocSN { get; set; }
        public virtual DbSet<sys_FieldNameDefs> sys_FieldNameDefs { get; set; }
        public virtual DbSet<sys_Modules> sys_Modules { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tb_AttachFile> tb_AttachFile { get; set; }
        public virtual DbSet<tb_CommDataDictType> tb_CommDataDictType { get; set; }
        public virtual DbSet<tb_CommonDataDict> tb_CommonDataDict { get; set; }
        public virtual DbSet<tb_CompanyInfo> tb_CompanyInfo { get; set; }
        public virtual DbSet<tb_Currency> tb_Currency { get; set; }
        public virtual DbSet<tb_Customer> tb_Customer { get; set; }
        public virtual DbSet<tb_CustomerAttribute> tb_CustomerAttribute { get; set; }
        public virtual DbSet<tb_Location> tb_Location { get; set; }
        public virtual DbSet<tb_Log> tb_Log { get; set; }
        public virtual DbSet<tb_LogDtl> tb_LogDtl { get; set; }
        public virtual DbSet<tb_LogFields> tb_LogFields { get; set; }
        public virtual DbSet<tb_LoginLog> tb_LoginLog { get; set; }
        public virtual DbSet<tb_MyAuthorityItem> tb_MyAuthorityItem { get; set; }
        public virtual DbSet<tb_MyFormTagName> tb_MyFormTagName { get; set; }
        public virtual DbSet<tb_MyMenu> tb_MyMenu { get; set; }
        public virtual DbSet<tb_MyUser> tb_MyUser { get; set; }
        public virtual DbSet<tb_MyUserGroup> tb_MyUserGroup { get; set; }
        public virtual DbSet<tb_MyUserGroupRe> tb_MyUserGroupRe { get; set; }
        public virtual DbSet<tb_MyUserRole> tb_MyUserRole { get; set; }
        public virtual DbSet<tb_PayType> tb_PayType { get; set; }
        public virtual DbSet<tb_Person> tb_Person { get; set; }
        public virtual DbSet<tb_Product> tb_Product { get; set; }
        public virtual DbSet<tb_ProductCategory> tb_ProductCategory { get; set; }
        public virtual DbSet<WCS_Info_Alarm> WCS_Info_Alarm { get; set; }
        public virtual DbSet<WCS_Info_HS> WCS_Info_HS { get; set; }
        public virtual DbSet<WCS_Info_Port> WCS_Info_Port { get; set; }
        public virtual DbSet<WCS_Info_RoadWay> WCS_Info_RoadWay { get; set; }
        public virtual DbSet<WCS_Info_SC> WCS_Info_SC { get; set; }
        public virtual DbSet<WCS_Info_Station> WCS_Info_Station { get; set; }
        public virtual DbSet<WCS_Log_AlarmRecord> WCS_Log_AlarmRecord { get; set; }
        public virtual DbSet<WCS_Log_ExecError> WCS_Log_ExecError { get; set; }
        public virtual DbSet<WCS_Log_Operation> WCS_Log_Operation { get; set; }
        public virtual DbSet<WCS_PLC_Address> WCS_PLC_Address { get; set; }
        public virtual DbSet<WMS_BillAccount> WMS_BillAccount { get; set; }
        public virtual DbSet<WMS_BillAccountDtl> WMS_BillAccountDtl { get; set; }
        public virtual DbSet<WMS_BillAdjust> WMS_BillAdjust { get; set; }
        public virtual DbSet<WMS_BillAdjustDtl> WMS_BillAdjustDtl { get; set; }
        public virtual DbSet<WMS_BillCheck> WMS_BillCheck { get; set; }
        public virtual DbSet<WMS_BillCheckDtl> WMS_BillCheckDtl { get; set; }
        public virtual DbSet<WMS_BillIn> WMS_BillIn { get; set; }
        public virtual DbSet<WMS_BillInDtl> WMS_BillInDtl { get; set; }
        public virtual DbSet<WMS_BillMove> WMS_BillMove { get; set; }
        public virtual DbSet<WMS_BillMoveDtl> WMS_BillMoveDtl { get; set; }
        public virtual DbSet<WMS_BillOut> WMS_BillOut { get; set; }
        public virtual DbSet<WMS_BillOutDtl> WMS_BillOutDtl { get; set; }
        public virtual DbSet<WMS_Customer> WMS_Customer { get; set; }
        public virtual DbSet<WMS_Department> WMS_Department { get; set; }
        public virtual DbSet<WMS_Material> WMS_Material { get; set; }
        public virtual DbSet<WMS_Pallet> WMS_Pallet { get; set; }
        public virtual DbSet<WMS_Stock> WMS_Stock { get; set; }
        public virtual DbSet<WMS_StockDtl> WMS_StockDtl { get; set; }
        public virtual DbSet<WMS_Task> WMS_Task { get; set; }
        public virtual DbSet<WMS_TaskDtl> WMS_TaskDtl { get; set; }
        public virtual DbSet<WMS_TaskLog> WMS_TaskLog { get; set; }
        public virtual DbSet<WMS_WareCell> WMS_WareCell { get; set; }
        public virtual DbSet<WMS_Warehouse> WMS_Warehouse { get; set; }
        public virtual DbSet<WMS_StockDtl_History> WMS_StockDtl_History { get; set; }
        public virtual DbSet<V_StockItemList> V_StockItemList { get; set; }
        public virtual DbSet<vw_CommonDataDicts> vw_CommonDataDicts { get; set; }
        public virtual DbSet<vw_LogOPType> vw_LogOPType { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_FuzzySearchCustomer(string content, string attributeCodes)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            var attributeCodesParameter = attributeCodes != null ?
                new ObjectParameter("AttributeCodes", attributeCodes) :
                new ObjectParameter("AttributeCodes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FuzzySearchCustomer", contentParameter, attributeCodesParameter);
        }
    
        public virtual ObjectResult<sp_FuzzySearchProduct_Result> sp_FuzzySearchProduct(string content)
        {
            var contentParameter = content != null ?
                new ObjectParameter("Content", content) :
                new ObjectParameter("Content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FuzzySearchProduct_Result>("sp_FuzzySearchProduct", contentParameter);
        }
    
        public virtual ObjectResult<sp_GetCustomerByAttributeCodes_Result> sp_GetCustomerByAttributeCodes(string attributeCodes, string nameWithCode)
        {
            var attributeCodesParameter = attributeCodes != null ?
                new ObjectParameter("AttributeCodes", attributeCodes) :
                new ObjectParameter("AttributeCodes", typeof(string));
    
            var nameWithCodeParameter = nameWithCode != null ?
                new ObjectParameter("NameWithCode", nameWithCode) :
                new ObjectParameter("NameWithCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCustomerByAttributeCodes_Result>("sp_GetCustomerByAttributeCodes", attributeCodesParameter, nameWithCodeParameter);
        }
    
        public virtual ObjectResult<sp_GetDataDicts_Result> sp_GetDataDicts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDataDicts_Result>("sp_GetDataDicts");
        }
    
        public virtual ObjectResult<string> sp_GetDataSN(string dataCode, string asHeader)
        {
            var dataCodeParameter = dataCode != null ?
                new ObjectParameter("DataCode", dataCode) :
                new ObjectParameter("DataCode", typeof(string));
    
            var asHeaderParameter = asHeader != null ?
                new ObjectParameter("AsHeader", asHeader) :
                new ObjectParameter("AsHeader", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetDataSN", dataCodeParameter, asHeaderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_GetFormAuthority(string account, Nullable<int> moduleID, string menuName)
        {
            var accountParameter = account != null ?
                new ObjectParameter("account", account) :
                new ObjectParameter("account", typeof(string));
    
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("moduleID", moduleID) :
                new ObjectParameter("moduleID", typeof(int));
    
            var menuNameParameter = menuName != null ?
                new ObjectParameter("menuName", menuName) :
                new ObjectParameter("menuName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_GetFormAuthority", accountParameter, moduleIDParameter, menuNameParameter);
        }
    
        public virtual ObjectResult<string> sp_GetNo(string docName)
        {
            var docNameParameter = docName != null ?
                new ObjectParameter("DocName", docName) :
                new ObjectParameter("DocName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetNo", docNameParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_Login_Result> sp_Login(string account, string password, string dataSetID, string loginUserType)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var dataSetIDParameter = dataSetID != null ?
                new ObjectParameter("DataSetID", dataSetID) :
                new ObjectParameter("DataSetID", typeof(string));
    
            var loginUserTypeParameter = loginUserType != null ?
                new ObjectParameter("LoginUserType", loginUserType) :
                new ObjectParameter("LoginUserType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Login_Result>("sp_Login", accountParameter, passwordParameter, dataSetIDParameter, loginUserTypeParameter);
        }
    
        public virtual int sp_Logout(string account)
        {
            var accountParameter = account != null ?
                new ObjectParameter("Account", account) :
                new ObjectParameter("Account", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Logout", accountParameter);
        }
    
        public virtual int sp_MyDeleteGroupData(string groupCode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MyDeleteGroupData", groupCodeParameter);
        }
    
        public virtual int sp_MyGetAuthorities(string userOrGroup, Nullable<int> type)
        {
            var userOrGroupParameter = userOrGroup != null ?
                new ObjectParameter("UserOrGroup", userOrGroup) :
                new ObjectParameter("UserOrGroup", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MyGetAuthorities", userOrGroupParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_MyGetGroupData_Result> sp_MyGetGroupData(string groupCode)
        {
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MyGetGroupData_Result>("sp_MyGetGroupData", groupCodeParameter);
        }
    
        public virtual int sp_QueryOutstandingAP(string invoiceNo, string supplierCode, string fromDate, string toDate, string endDate)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var supplierCodeParameter = supplierCode != null ?
                new ObjectParameter("SupplierCode", supplierCode) :
                new ObjectParameter("SupplierCode", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_QueryOutstandingAP", invoiceNoParameter, supplierCodeParameter, fromDateParameter, toDateParameter, endDateParameter);
        }
    
        public virtual int sp_QueryOutstandingAR(string invoiceNo, string customerCode, string fromDate, string toDate, string endDate)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_QueryOutstandingAR", invoiceNoParameter, customerCodeParameter, fromDateParameter, toDateParameter, endDateParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_RptAP(string docNoFrom, string docNoTo, string dateFrom, string dateTo)
        {
            var docNoFromParameter = docNoFrom != null ?
                new ObjectParameter("DocNoFrom", docNoFrom) :
                new ObjectParameter("DocNoFrom", typeof(string));
    
            var docNoToParameter = docNoTo != null ?
                new ObjectParameter("DocNoTo", docNoTo) :
                new ObjectParameter("DocNoTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RptAP", docNoFromParameter, docNoToParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_RptAR(string docNoFrom, string docNoTo, string dateFrom, string dateTo)
        {
            var docNoFromParameter = docNoFrom != null ?
                new ObjectParameter("DocNoFrom", docNoFrom) :
                new ObjectParameter("DocNoFrom", typeof(string));
    
            var docNoToParameter = docNoTo != null ?
                new ObjectParameter("DocNoTo", docNoTo) :
                new ObjectParameter("DocNoTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RptAR", docNoFromParameter, docNoToParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_RptAR_Checklist(string docNoFrom, string docNoTo, string dateFrom, string dateTo)
        {
            var docNoFromParameter = docNoFrom != null ?
                new ObjectParameter("DocNoFrom", docNoFrom) :
                new ObjectParameter("DocNoFrom", typeof(string));
    
            var docNoToParameter = docNoTo != null ?
                new ObjectParameter("DocNoTo", docNoTo) :
                new ObjectParameter("DocNoTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RptAR_Checklist", docNoFromParameter, docNoToParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_RptSO(string docNoFrom, string docNoTo, string dateFrom, string dateTo)
        {
            var docNoFromParameter = docNoFrom != null ?
                new ObjectParameter("DocNoFrom", docNoFrom) :
                new ObjectParameter("DocNoFrom", typeof(string));
    
            var docNoToParameter = docNoTo != null ?
                new ObjectParameter("DocNoTo", docNoTo) :
                new ObjectParameter("DocNoTo", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RptSO", docNoFromParameter, docNoToParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int sp_SearchLog(string logUser, string tableName, string logDateFrom, string logDateTo)
        {
            var logUserParameter = logUser != null ?
                new ObjectParameter("LogUser", logUser) :
                new ObjectParameter("LogUser", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var logDateFromParameter = logDateFrom != null ?
                new ObjectParameter("LogDateFrom", logDateFrom) :
                new ObjectParameter("LogDateFrom", typeof(string));
    
            var logDateToParameter = logDateTo != null ?
                new ObjectParameter("LogDateTo", logDateTo) :
                new ObjectParameter("LogDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SearchLog", logUserParameter, tableNameParameter, logDateFromParameter, logDateToParameter);
        }
    
        public virtual int sp_sys_CreateFieldDefs(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_sys_CreateFieldDefs", tableNameParameter);
        }
    
        public virtual ObjectResult<sp_sys_GetTableFieldDef_Result> sp_sys_GetTableFieldDef(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_sys_GetTableFieldDef_Result>("sp_sys_GetTableFieldDef", tableNameParameter);
        }
    
        public virtual ObjectResult<sp_sys_GetTableFieldNames_Result> sp_sys_GetTableFieldNames(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_sys_GetTableFieldNames_Result>("sp_sys_GetTableFieldNames", tableNameParameter);
        }
    
        public virtual ObjectResult<sp_sys_GetTableFieldsForPicker_Result> sp_sys_GetTableFieldsForPicker(string tableName, string returnAll)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var returnAllParameter = returnAll != null ?
                new ObjectParameter("ReturnAll", returnAll) :
                new ObjectParameter("ReturnAll", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_sys_GetTableFieldsForPicker_Result>("sp_sys_GetTableFieldsForPicker", tableNameParameter, returnAllParameter);
        }
    
        public virtual ObjectResult<sp_sys_GetTableFieldType_Result> sp_sys_GetTableFieldType(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_sys_GetTableFieldType_Result>("sp_sys_GetTableFieldType", tableNameParameter);
        }
    
        public virtual int sp_sys_LogRecord(string iP, string client, string loginer, string funcationName, string execSql, string errMsg, Nullable<int> optType)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var funcationNameParameter = funcationName != null ?
                new ObjectParameter("FuncationName", funcationName) :
                new ObjectParameter("FuncationName", typeof(string));
    
            var execSqlParameter = execSql != null ?
                new ObjectParameter("ExecSql", execSql) :
                new ObjectParameter("ExecSql", typeof(string));
    
            var errMsgParameter = errMsg != null ?
                new ObjectParameter("ErrMsg", errMsg) :
                new ObjectParameter("ErrMsg", typeof(string));
    
            var optTypeParameter = optType.HasValue ?
                new ObjectParameter("OptType", optType) :
                new ObjectParameter("OptType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_sys_LogRecord", iPParameter, clientParameter, loginerParameter, funcationNameParameter, execSqlParameter, errMsgParameter, optTypeParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_WCS_Check_DocNoOut(string docNo, string palletId, Nullable<int> taskType, ObjectParameter resultId, ObjectParameter resultMsg)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("palletId", palletId) :
                new ObjectParameter("palletId", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Check_DocNoOut", docNoParameter, palletIdParameter, taskTypeParameter, resultId, resultMsg);
        }
    
        public virtual int sp_WCS_Check_PalletIn(string palletId, Nullable<int> taskType, ObjectParameter resultId, ObjectParameter resultMsg)
        {
            var palletIdParameter = palletId != null ?
                new ObjectParameter("palletId", palletId) :
                new ObjectParameter("palletId", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Check_PalletIn", palletIdParameter, taskTypeParameter, resultId, resultMsg);
        }
    
        public virtual int sp_WCS_Check_PalletOut(string palletId, Nullable<int> taskType, ObjectParameter resultId, ObjectParameter resultMsg)
        {
            var palletIdParameter = palletId != null ?
                new ObjectParameter("palletId", palletId) :
                new ObjectParameter("palletId", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Check_PalletOut", palletIdParameter, taskTypeParameter, resultId, resultMsg);
        }
    
        public virtual int sp_WCS_Stock_StatusUpdate(string pallet_Id, Nullable<int> state)
        {
            var pallet_IdParameter = pallet_Id != null ?
                new ObjectParameter("Pallet_Id", pallet_Id) :
                new ObjectParameter("Pallet_Id", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Stock_StatusUpdate", pallet_IdParameter, stateParameter);
        }
    
        public virtual int sp_WCS_Task_GenerateTaskNo(ObjectParameter taskId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Task_GenerateTaskNo", taskId);
        }
    
        public virtual int sp_WCS_Task_GetTaskNoAndStationInfo(string iP, string client, string loginer, string palletId, Nullable<int> taskType, ObjectParameter taskNo, ObjectParameter optionStation)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("palletId", palletId) :
                new ObjectParameter("palletId", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Task_GetTaskNoAndStationInfo", iPParameter, clientParameter, loginerParameter, palletIdParameter, taskTypeParameter, taskNo, optionStation);
        }
    
        public virtual ObjectResult<sp_WCS_Task_PortNumModify_Result> sp_WCS_Task_PortNumModify(string iP, string client, string loginer, string sysType, Nullable<int> taskNo, Nullable<int> portNum)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            var portNumParameter = portNum.HasValue ?
                new ObjectParameter("PortNum", portNum) :
                new ObjectParameter("PortNum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_PortNumModify_Result>("sp_WCS_Task_PortNumModify", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter, portNumParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_PriorityModify_Result> sp_WCS_Task_PriorityModify(string iP, string client, string loginer, string sysType, Nullable<int> taskNo, Nullable<int> nFirst, Nullable<int> nSecond)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            var nFirstParameter = nFirst.HasValue ?
                new ObjectParameter("nFirst", nFirst) :
                new ObjectParameter("nFirst", typeof(int));
    
            var nSecondParameter = nSecond.HasValue ?
                new ObjectParameter("nSecond", nSecond) :
                new ObjectParameter("nSecond", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_PriorityModify_Result>("sp_WCS_Task_PriorityModify", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter, nFirstParameter, nSecondParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_StationModify_Result> sp_WCS_Task_StationModify(string iP, string client, string loginer, string sysType, Nullable<int> taskNo, Nullable<int> station)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            var stationParameter = station.HasValue ?
                new ObjectParameter("Station", station) :
                new ObjectParameter("Station", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_StationModify_Result>("sp_WCS_Task_StationModify", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter, stationParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_StatusUpdate_Result> sp_WCS_Task_StatusUpdate(string iP, string client, string loginer, Nullable<int> taskNo, Nullable<int> statusValue)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            var statusValueParameter = statusValue.HasValue ?
                new ObjectParameter("StatusValue", statusValue) :
                new ObjectParameter("StatusValue", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_StatusUpdate_Result>("sp_WCS_Task_StatusUpdate", iPParameter, clientParameter, loginerParameter, taskNoParameter, statusValueParameter);
        }
    
        public virtual int sp_WCS_Task_TaskAccount(string iP, string client, string loginer, string sysType, Nullable<int> taskNo, Nullable<int> nWays)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            var nWaysParameter = nWays.HasValue ?
                new ObjectParameter("nWays", nWays) :
                new ObjectParameter("nWays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Task_TaskAccount", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter, nWaysParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskAssign_Result> sp_WCS_Task_TaskAssign(string iP, string client, string loginer, string sysType, Nullable<int> taskNo)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskAssign_Result>("sp_WCS_Task_TaskAssign", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCancel_Result> sp_WCS_Task_TaskCancel(string iP, string client, string loginer, string sysType, Nullable<int> taskNo)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCancel_Result>("sp_WCS_Task_TaskCancel", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_AppendIn_Result> sp_WCS_Task_TaskCreate_AppendIn(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_AppendIn_Result>("sp_WCS_Task_TaskCreate_AppendIn", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_EmptyIn_Result> sp_WCS_Task_TaskCreate_EmptyIn(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_EmptyIn_Result>("sp_WCS_Task_TaskCreate_EmptyIn", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_EmptyOut_Result> sp_WCS_Task_TaskCreate_EmptyOut(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_EmptyOut_Result>("sp_WCS_Task_TaskCreate_EmptyOut", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_FullIn_Result> sp_WCS_Task_TaskCreate_FullIn(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_FullIn_Result>("sp_WCS_Task_TaskCreate_FullIn", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_FullOut_Result> sp_WCS_Task_TaskCreate_FullOut(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_FullOut_Result>("sp_WCS_Task_TaskCreate_FullOut", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskCreate_SortOut_Result> sp_WCS_Task_TaskCreate_SortOut(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskCreate_SortOut_Result>("sp_WCS_Task_TaskCreate_SortOut", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual int sp_WCS_Task_TaskCreateTran(string iP, string client, string loginer, Nullable<int> taskType, Nullable<int> docType, string docNo, Nullable<int> nLineNo, string batchNo, string palletId, string barcode, Nullable<int> qty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            var docTypeParameter = docType.HasValue ?
                new ObjectParameter("DocType", docType) :
                new ObjectParameter("DocType", typeof(int));
    
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var batchNoParameter = batchNo != null ?
                new ObjectParameter("BatchNo", batchNo) :
                new ObjectParameter("BatchNo", typeof(string));
    
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_Task_TaskCreateTran", iPParameter, clientParameter, loginerParameter, taskTypeParameter, docTypeParameter, docNoParameter, nLineNoParameter, batchNoParameter, palletIdParameter, barcodeParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WCS_Task_TaskDelete_Result> sp_WCS_Task_TaskDelete(string iP, string client, string loginer, string sysType, Nullable<int> taskNo)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var sysTypeParameter = sysType != null ?
                new ObjectParameter("sysType", sysType) :
                new ObjectParameter("sysType", typeof(string));
    
            var taskNoParameter = taskNo.HasValue ?
                new ObjectParameter("TaskNo", taskNo) :
                new ObjectParameter("TaskNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_Task_TaskDelete_Result>("sp_WCS_Task_TaskDelete", iPParameter, clientParameter, loginerParameter, sysTypeParameter, taskNoParameter);
        }
    
        public virtual int sp_WCS_WareCell_StationAssign(string palletId, ObjectParameter optionStation)
        {
            var palletIdParameter = palletId != null ?
                new ObjectParameter("PalletId", palletId) :
                new ObjectParameter("PalletId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_WareCell_StationAssign", palletIdParameter, optionStation);
        }
    
        public virtual int sp_WCS_WareCell_StatusUpdate(string wareCell_Id, Nullable<int> state)
        {
            var wareCell_IdParameter = wareCell_Id != null ?
                new ObjectParameter("WareCell_Id", wareCell_Id) :
                new ObjectParameter("WareCell_Id", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WCS_WareCell_StatusUpdate", wareCell_IdParameter, stateParameter);
        }
    
        public virtual ObjectResult<sp_WCS_WareCell_WareCellAssign_Result> sp_WCS_WareCell_WareCellAssign(Nullable<int> oPC_TaskNo, Nullable<int> optionStation, ObjectParameter wareCell_Id)
        {
            var oPC_TaskNoParameter = oPC_TaskNo.HasValue ?
                new ObjectParameter("OPC_TaskNo", oPC_TaskNo) :
                new ObjectParameter("OPC_TaskNo", typeof(int));
    
            var optionStationParameter = optionStation.HasValue ?
                new ObjectParameter("OptionStation", optionStation) :
                new ObjectParameter("OptionStation", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WCS_WareCell_WareCellAssign_Result>("sp_WCS_WareCell_WareCellAssign", oPC_TaskNoParameter, optionStationParameter, wareCell_Id);
        }
    
        public virtual int sp_WMS_Doc_QtyUpdate(string docNo, Nullable<int> nLineNo, Nullable<int> optionQty, Nullable<int> finishQty, Nullable<int> taskType, ObjectParameter resultId, ObjectParameter resultMsg)
        {
            var docNoParameter = docNo != null ?
                new ObjectParameter("DocNo", docNo) :
                new ObjectParameter("DocNo", typeof(string));
    
            var nLineNoParameter = nLineNo.HasValue ?
                new ObjectParameter("nLineNo", nLineNo) :
                new ObjectParameter("nLineNo", typeof(int));
    
            var optionQtyParameter = optionQty.HasValue ?
                new ObjectParameter("OptionQty", optionQty) :
                new ObjectParameter("OptionQty", typeof(int));
    
            var finishQtyParameter = finishQty.HasValue ?
                new ObjectParameter("FinishQty", finishQty) :
                new ObjectParameter("FinishQty", typeof(int));
    
            var taskTypeParameter = taskType.HasValue ?
                new ObjectParameter("TaskType", taskType) :
                new ObjectParameter("TaskType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WMS_Doc_QtyUpdate", docNoParameter, nLineNoParameter, optionQtyParameter, finishQtyParameter, taskTypeParameter, resultId, resultMsg);
        }
    
        public virtual ObjectResult<sp_WMS_Info_CreatePallet_Result> sp_WMS_Info_CreatePallet(string prefix, string palletSpec, Nullable<int> startNo, Nullable<int> qty)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var palletSpecParameter = palletSpec != null ?
                new ObjectParameter("PalletSpec", palletSpec) :
                new ObjectParameter("PalletSpec", typeof(string));
    
            var startNoParameter = startNo.HasValue ?
                new ObjectParameter("StartNo", startNo) :
                new ObjectParameter("StartNo", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WMS_Info_CreatePallet_Result>("sp_WMS_Info_CreatePallet", prefixParameter, palletSpecParameter, startNoParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_WMS_Info_CreateWareCell_Result> sp_WMS_Info_CreateWareCell(string prefix, string warecellSpec, Nullable<int> rowMax, Nullable<int> columnMax, Nullable<int> layerMax, Nullable<int> rowStart, Nullable<int> columnStart, Nullable<int> layerStart, Nullable<int> rowEnd, Nullable<int> columnEnd, Nullable<int> layerEnd)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var warecellSpecParameter = warecellSpec != null ?
                new ObjectParameter("WarecellSpec", warecellSpec) :
                new ObjectParameter("WarecellSpec", typeof(string));
    
            var rowMaxParameter = rowMax.HasValue ?
                new ObjectParameter("RowMax", rowMax) :
                new ObjectParameter("RowMax", typeof(int));
    
            var columnMaxParameter = columnMax.HasValue ?
                new ObjectParameter("ColumnMax", columnMax) :
                new ObjectParameter("ColumnMax", typeof(int));
    
            var layerMaxParameter = layerMax.HasValue ?
                new ObjectParameter("LayerMax", layerMax) :
                new ObjectParameter("LayerMax", typeof(int));
    
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var columnStartParameter = columnStart.HasValue ?
                new ObjectParameter("ColumnStart", columnStart) :
                new ObjectParameter("ColumnStart", typeof(int));
    
            var layerStartParameter = layerStart.HasValue ?
                new ObjectParameter("LayerStart", layerStart) :
                new ObjectParameter("LayerStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            var columnEndParameter = columnEnd.HasValue ?
                new ObjectParameter("ColumnEnd", columnEnd) :
                new ObjectParameter("ColumnEnd", typeof(int));
    
            var layerEndParameter = layerEnd.HasValue ?
                new ObjectParameter("LayerEnd", layerEnd) :
                new ObjectParameter("LayerEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WMS_Info_CreateWareCell_Result>("sp_WMS_Info_CreateWareCell", prefixParameter, warecellSpecParameter, rowMaxParameter, columnMaxParameter, layerMaxParameter, rowStartParameter, columnStartParameter, layerStartParameter, rowEndParameter, columnEndParameter, layerEndParameter);
        }
    
        public virtual int sp_WMS_Info_DeletePallet(string prefix, string palletSpec, Nullable<int> startNo, Nullable<int> qty)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var palletSpecParameter = palletSpec != null ?
                new ObjectParameter("PalletSpec", palletSpec) :
                new ObjectParameter("PalletSpec", typeof(string));
    
            var startNoParameter = startNo.HasValue ?
                new ObjectParameter("StartNo", startNo) :
                new ObjectParameter("StartNo", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WMS_Info_DeletePallet", prefixParameter, palletSpecParameter, startNoParameter, qtyParameter);
        }
    
        public virtual int sp_WMS_Info_DeleteWareCell(string prefix, string warecellSpec, Nullable<int> rowMax, Nullable<int> columnMax, Nullable<int> layerMax, Nullable<int> rowStart, Nullable<int> columnStart, Nullable<int> layerStart, Nullable<int> rowEnd, Nullable<int> columnEnd, Nullable<int> layerEnd)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var warecellSpecParameter = warecellSpec != null ?
                new ObjectParameter("WarecellSpec", warecellSpec) :
                new ObjectParameter("WarecellSpec", typeof(string));
    
            var rowMaxParameter = rowMax.HasValue ?
                new ObjectParameter("RowMax", rowMax) :
                new ObjectParameter("RowMax", typeof(int));
    
            var columnMaxParameter = columnMax.HasValue ?
                new ObjectParameter("ColumnMax", columnMax) :
                new ObjectParameter("ColumnMax", typeof(int));
    
            var layerMaxParameter = layerMax.HasValue ?
                new ObjectParameter("LayerMax", layerMax) :
                new ObjectParameter("LayerMax", typeof(int));
    
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var columnStartParameter = columnStart.HasValue ?
                new ObjectParameter("ColumnStart", columnStart) :
                new ObjectParameter("ColumnStart", typeof(int));
    
            var layerStartParameter = layerStart.HasValue ?
                new ObjectParameter("LayerStart", layerStart) :
                new ObjectParameter("LayerStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            var columnEndParameter = columnEnd.HasValue ?
                new ObjectParameter("ColumnEnd", columnEnd) :
                new ObjectParameter("ColumnEnd", typeof(int));
    
            var layerEndParameter = layerEnd.HasValue ?
                new ObjectParameter("LayerEnd", layerEnd) :
                new ObjectParameter("LayerEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WMS_Info_DeleteWareCell", prefixParameter, warecellSpecParameter, rowMaxParameter, columnMaxParameter, layerMaxParameter, rowStartParameter, columnStartParameter, layerStartParameter, rowEndParameter, columnEndParameter, layerEndParameter);
        }
    
        public virtual ObjectResult<sp_WMS_Stock_AddManual_Result> sp_WMS_Stock_AddManual(string iP, string client, string loginer, string palletID, string positionId, string materialCode, Nullable<int> materialQty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var palletIDParameter = palletID != null ?
                new ObjectParameter("PalletID", palletID) :
                new ObjectParameter("PalletID", typeof(string));
    
            var positionIdParameter = positionId != null ?
                new ObjectParameter("PositionId", positionId) :
                new ObjectParameter("PositionId", typeof(string));
    
            var materialCodeParameter = materialCode != null ?
                new ObjectParameter("MaterialCode", materialCode) :
                new ObjectParameter("MaterialCode", typeof(string));
    
            var materialQtyParameter = materialQty.HasValue ?
                new ObjectParameter("MaterialQty", materialQty) :
                new ObjectParameter("MaterialQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WMS_Stock_AddManual_Result>("sp_WMS_Stock_AddManual", iPParameter, clientParameter, loginerParameter, palletIDParameter, positionIdParameter, materialCodeParameter, materialQtyParameter);
        }
    
        public virtual int sp_WMS_Stock_DeleteManual(string iP, string client, string loginer, Nullable<int> isId)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var isIdParameter = isId.HasValue ?
                new ObjectParameter("IsId", isId) :
                new ObjectParameter("IsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_WMS_Stock_DeleteManual", iPParameter, clientParameter, loginerParameter, isIdParameter);
        }
    
        public virtual ObjectResult<sp_WMS_Stock_ModifyManual_Result> sp_WMS_Stock_ModifyManual(string iP, string client, string loginer, Nullable<int> isId, Nullable<int> materialQty)
        {
            var iPParameter = iP != null ?
                new ObjectParameter("IP", iP) :
                new ObjectParameter("IP", typeof(string));
    
            var clientParameter = client != null ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(string));
    
            var loginerParameter = loginer != null ?
                new ObjectParameter("Loginer", loginer) :
                new ObjectParameter("Loginer", typeof(string));
    
            var isIdParameter = isId.HasValue ?
                new ObjectParameter("IsId", isId) :
                new ObjectParameter("IsId", typeof(int));
    
            var materialQtyParameter = materialQty.HasValue ?
                new ObjectParameter("MaterialQty", materialQty) :
                new ObjectParameter("MaterialQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WMS_Stock_ModifyManual_Result>("sp_WMS_Stock_ModifyManual", iPParameter, clientParameter, loginerParameter, isIdParameter, materialQtyParameter);
        }
    
        public virtual int Tmp_ArrivalPort_In(Nullable<int> task_Id)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ArrivalPort_In", task_IdParameter);
        }
    
        public virtual int Tmp_ArrivalPort_Out(Nullable<int> task_Id)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ArrivalPort_Out", task_IdParameter);
        }
    
        public virtual int Tmp_ArrivalStation_In(Nullable<int> task_Id)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("task_Id", task_Id) :
                new ObjectParameter("task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ArrivalStation_In", task_IdParameter);
        }
    
        public virtual int Tmp_ArrivalStation_Out(Nullable<int> task_Id)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("task_Id", task_Id) :
                new ObjectParameter("task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ArrivalStation_Out", task_IdParameter);
        }
    
        public virtual int Tmp_CreateAllInTask()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_CreateAllInTask");
        }
    
        public virtual int Tmp_CreateAllOutTask(string palletId)
        {
            var palletIdParameter = palletId != null ?
                new ObjectParameter("palletId", palletId) :
                new ObjectParameter("palletId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_CreateAllOutTask", palletIdParameter);
        }
    
        public virtual int tmp_Job_TaskStart()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tmp_Job_TaskStart");
        }
    
        public virtual int Tmp_ScFinishTask(Nullable<int> task_Id, string task_Type)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var task_TypeParameter = task_Type != null ?
                new ObjectParameter("Task_Type", task_Type) :
                new ObjectParameter("Task_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ScFinishTask", task_IdParameter, task_TypeParameter);
        }
    
        public virtual int Tmp_ScReceiveTask(Nullable<int> task_Id, string task_Type)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var task_TypeParameter = task_Type != null ?
                new ObjectParameter("Task_Type", task_Type) :
                new ObjectParameter("Task_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_ScReceiveTask", task_IdParameter, task_TypeParameter);
        }
    
        public virtual int Tmp_sys_Init()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_sys_Init");
        }
    
        public virtual int Tmp_TaskAssign(Nullable<int> task_Id, string task_Type)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var task_TypeParameter = task_Type != null ?
                new ObjectParameter("Task_Type", task_Type) :
                new ObjectParameter("Task_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_TaskAssign", task_IdParameter, task_TypeParameter);
        }
    
        public virtual int Tmp_TaskFinish(Nullable<int> task_Id, string task_Type)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            var task_TypeParameter = task_Type != null ?
                new ObjectParameter("Task_Type", task_Type) :
                new ObjectParameter("Task_Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_TaskFinish", task_IdParameter, task_TypeParameter);
        }
    
        public virtual int Tmp_TaskStart(Nullable<int> task_Id)
        {
            var task_IdParameter = task_Id.HasValue ?
                new ObjectParameter("Task_Id", task_Id) :
                new ObjectParameter("Task_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tmp_TaskStart", task_IdParameter);
        }
    
        public virtual int usp_GetPO(string pONO, string endDate)
        {
            var pONOParameter = pONO != null ?
                new ObjectParameter("PONO", pONO) :
                new ObjectParameter("PONO", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetPO", pONOParameter, endDateParameter);
        }
    
        public virtual int usp_TestUpdateOther()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TestUpdateOther");
        }
    
        public virtual int usp_TestUpdateStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TestUpdateStock");
        }
    }
}
